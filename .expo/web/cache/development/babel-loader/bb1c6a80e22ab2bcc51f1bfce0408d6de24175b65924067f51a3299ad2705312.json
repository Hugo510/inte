{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { Client } from 'paho-mqtt';\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar MQTTComponent = function MQTTComponent() {\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    message = _useState2[0],\n    setMessage = _useState2[1];\n  useEffect(function () {\n    var clientId = 'clientId_' + Math.random().toString(16).slice(2, 10);\n    var client = new Client('broker.hivemq.com', Number(1883), clientId);\n    var options = {\n      useSSL: false,\n      onSuccess: function onSuccess() {\n        console.log('Conectado a MQTT');\n        client.subscribe('/hugo/temperatura');\n      },\n      onFailure: function onFailure(error) {\n        console.log('Conexión fallida:', error);\n      }\n    };\n    client.onConnectionLost = function (responseObject) {\n      if (responseObject.errorCode !== 0) {\n        console.log('onConnectionLost:' + responseObject.errorMessage);\n      }\n    };\n    client.onMessageArrived = function (message) {\n      console.log('Mensaje recibido:', message.payloadString);\n      setMessage(message.payloadString);\n    };\n    client.connect(options);\n    return function () {\n      if (client.isConnected()) {\n        client.disconnect();\n      }\n    };\n  }, []);\n  return _jsx(View, {\n    style: styles.container,\n    children: _jsxs(Text, {\n      style: styles.text,\n      children: [\"Mensaje MQTT: \", message]\n    })\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#f5fcff'\n  },\n  text: {\n    fontSize: 20,\n    textAlign: 'center',\n    margin: 10\n  }\n});\nexport default MQTTComponent;","map":{"version":3,"names":["React","useState","useEffect","View","Text","StyleSheet","Client","jsxs","_jsxs","jsx","_jsx","MQTTComponent","_useState","_useState2","_slicedToArray","message","setMessage","clientId","Math","random","toString","slice","client","Number","options","useSSL","onSuccess","console","log","subscribe","onFailure","error","onConnectionLost","responseObject","errorCode","errorMessage","onMessageArrived","payloadString","connect","isConnected","disconnect","style","styles","container","children","text","create","flex","justifyContent","alignItems","backgroundColor","fontSize","textAlign","margin"],"sources":["F:/proyectos/inte/views/comunication/comunicationScreen.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { View, Text, StyleSheet } from 'react-native';\r\nimport { Client } from 'paho-mqtt';\r\n\r\nconst MQTTComponent = () => {\r\n  const [message, setMessage] = useState('');\r\n\r\n  useEffect(() => {\r\n    // Crear cliente MQTT con la URI completa y el Client ID\r\n    const clientId = 'clientId_' + Math.random().toString(16).slice(2, 10);\r\n    // Cambio aquí: se ha actualizado el puerto a 8883 y se habilita SSL\r\n    const client = new Client('broker.hivemq.com', Number(1883), clientId);\r\n  \r\n    // Configurar conexión segura\r\n    const options = {\r\n      useSSL: false, // Habilitar SSL/TLS\r\n      onSuccess: () => {\r\n        console.log('Conectado a MQTT');\r\n        client.subscribe('/hugo/temperatura');\r\n      },\r\n      onFailure: error => {\r\n        console.log('Conexión fallida:', error);\r\n      },\r\n      // Opciones adicionales para SSL/TLS podrían ser necesarias aquí\r\n      // dependiendo de la configuración del broker y los requerimientos de seguridad\r\n    };\r\n  \r\n    // Manejar la conexión perdida\r\n    client.onConnectionLost = responseObject => {\r\n      if (responseObject.errorCode !== 0) {\r\n        console.log('onConnectionLost:' + responseObject.errorMessage);\r\n      }\r\n    };\r\n  \r\n    // Manejar mensajes entrantes\r\n    client.onMessageArrived = message => {\r\n      console.log('Mensaje recibido:', message.payloadString);\r\n      setMessage(message.payloadString);\r\n    };\r\n  \r\n    // Conectar al broker MQTT\r\n    client.connect(options);\r\n  \r\n    // Limpieza al desmontar el componente\r\n    return () => {\r\n      if (client.isConnected()) {\r\n        client.disconnect();\r\n      }\r\n    };\r\n  }, []);\r\n  \r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <Text style={styles.text}>Mensaje MQTT: {message}</Text>\r\n    </View>\r\n  );\r\n};\r\n\r\n// Estilos\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    backgroundColor: '#f5fcff',\r\n  },\r\n  text: {\r\n    fontSize: 20,\r\n    textAlign: 'center',\r\n    margin: 10,\r\n  },\r\n});\r\n\r\nexport default MQTTComponent;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,UAAA;AAEnD,SAASC,MAAM,QAAQ,WAAW;AAAC,SAAAC,IAAA,IAAAC,KAAA;AAAA,SAAAC,GAAA,IAAAC,IAAA;AAEnC,IAAMC,aAAa,GAAG,SAAhBA,aAAaA,CAAA,EAAS;EAC1B,IAAAC,SAAA,GAA8BX,QAAQ,CAAC,EAAE,CAAC;IAAAY,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAnCG,OAAO,GAAAF,UAAA;IAAEG,UAAU,GAAAH,UAAA;EAE1BX,SAAS,CAAC,YAAM;IAEd,IAAMe,QAAQ,GAAG,WAAW,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;IAEtE,IAAMC,MAAM,GAAG,IAAIhB,MAAM,CAAC,mBAAmB,EAAEiB,MAAM,CAAC,IAAI,CAAC,EAAEN,QAAQ,CAAC;IAGtE,IAAMO,OAAO,GAAG;MACdC,MAAM,EAAE,KAAK;MACbC,SAAS,EAAE,SAAAA,UAAA,EAAM;QACfC,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;QAC/BN,MAAM,CAACO,SAAS,CAAC,mBAAmB,CAAC;MACvC,CAAC;MACDC,SAAS,EAAE,SAAAA,UAAAC,KAAK,EAAI;QAClBJ,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEG,KAAK,CAAC;MACzC;IAGF,CAAC;IAGDT,MAAM,CAACU,gBAAgB,GAAG,UAAAC,cAAc,EAAI;MAC1C,IAAIA,cAAc,CAACC,SAAS,KAAK,CAAC,EAAE;QAClCP,OAAO,CAACC,GAAG,CAAC,mBAAmB,GAAGK,cAAc,CAACE,YAAY,CAAC;MAChE;IACF,CAAC;IAGDb,MAAM,CAACc,gBAAgB,GAAG,UAAArB,OAAO,EAAI;MACnCY,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEb,OAAO,CAACsB,aAAa,CAAC;MACvDrB,UAAU,CAACD,OAAO,CAACsB,aAAa,CAAC;IACnC,CAAC;IAGDf,MAAM,CAACgB,OAAO,CAACd,OAAO,CAAC;IAGvB,OAAO,YAAM;MACX,IAAIF,MAAM,CAACiB,WAAW,CAAC,CAAC,EAAE;QACxBjB,MAAM,CAACkB,UAAU,CAAC,CAAC;MACrB;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAGN,OACE9B,IAAA,CAACP,IAAI;IAACsC,KAAK,EAAEC,MAAM,CAACC,SAAU;IAAAC,QAAA,EAC5BpC,KAAA,CAACJ,IAAI;MAACqC,KAAK,EAAEC,MAAM,CAACG,IAAK;MAAAD,QAAA,GAAC,gBAAc,EAAC7B,OAAO;IAAA,CAAO;EAAC,CACpD,CAAC;AAEX,CAAC;AAGD,IAAM2B,MAAM,GAAGrC,UAAU,CAACyC,MAAM,CAAC;EAC/BH,SAAS,EAAE;IACTI,IAAI,EAAE,CAAC;IACPC,cAAc,EAAE,QAAQ;IACxBC,UAAU,EAAE,QAAQ;IACpBC,eAAe,EAAE;EACnB,CAAC;EACDL,IAAI,EAAE;IACJM,QAAQ,EAAE,EAAE;IACZC,SAAS,EAAE,QAAQ;IACnBC,MAAM,EAAE;EACV;AACF,CAAC,CAAC;AAEF,eAAe1C,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}