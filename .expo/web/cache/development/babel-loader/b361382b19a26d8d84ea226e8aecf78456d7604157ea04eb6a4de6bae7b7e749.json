{"ast":null,"code":"import React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { BarChart } from 'react-native-chart-kit';\nimport getChartData from \"./GetChartData\";\nimport styles from \"../graphicsScreen.styles\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar ChartRenderer = function ChartRenderer(_ref) {\n  var graphData = _ref.graphData,\n    screenWidth = _ref.screenWidth,\n    chartConfig = _ref.chartConfig;\n  if (!graphData || Object.keys(graphData).length === 0) {\n    return _jsx(Text, {\n      children: \"No data available to display charts. Please check sensor connections or settings.\"\n    });\n  }\n  return _jsx(ScrollView, {\n    children: Object.keys(graphData).map(function (category) {\n      try {\n        var chartData = getChartData(graphData[category], category);\n        return _jsxs(View, {\n          style: styles.chartContainer,\n          children: [_jsx(Text, {\n            style: {\n              textAlign: 'center'\n            },\n            children: category\n          }), _jsx(BarChart, {\n            data: chartData,\n            width: screenWidth,\n            height: 220,\n            chartConfig: chartConfig,\n            fromZero: true\n          })]\n        }, category);\n      } catch (error) {\n        console.error(`Failed to render chart for ${category}: ${error}`);\n        return _jsxs(Text, {\n          style: {\n            color: 'red',\n            textAlign: 'center'\n          },\n          children: [\"Error in \", category, \": \", error.message, \". Please check sensor data.\"]\n        }, category);\n      }\n    })\n  });\n};\nexport default ChartRenderer;","map":{"version":3,"names":["React","View","Text","ScrollView","BarChart","getChartData","styles","jsx","_jsx","jsxs","_jsxs","ChartRenderer","_ref","graphData","screenWidth","chartConfig","Object","keys","length","children","map","category","chartData","style","chartContainer","textAlign","data","width","height","fromZero","error","console","color","message"],"sources":["F:/proyectos/intew/views/graphics/components/ChartRenderer.js"],"sourcesContent":["import React from 'react';\r\nimport { View, Text, ScrollView } from 'react-native';\r\nimport { BarChart } from 'react-native-chart-kit';\r\nimport getChartData from './GetChartData';\r\nimport styles from '../graphicsScreen.styles';  // AsegÃºrate de que la ruta de los estilos es correcta\r\n\r\nconst ChartRenderer = ({ graphData, screenWidth, chartConfig }) => {\r\n  if (!graphData || Object.keys(graphData).length === 0) {\r\n    return <Text>No data available to display charts. Please check sensor connections or settings.</Text>;\r\n  }\r\n\r\n  return (\r\n    <ScrollView>\r\n      {Object.keys(graphData).map(category => {\r\n        try {\r\n          const chartData = getChartData(graphData[category], category);\r\n          \r\n          return (\r\n            <View key={category} style={styles.chartContainer}>\r\n              <Text style={{ textAlign: 'center' }}>{category}</Text>\r\n              <BarChart\r\n                data={chartData}\r\n                width={screenWidth}\r\n                height={220}\r\n                chartConfig={chartConfig}\r\n                fromZero={true}\r\n              />\r\n            </View>\r\n          );\r\n        } catch (error) {\r\n          console.error(`Failed to render chart for ${category}: ${error}`);\r\n          return <Text key={category} style={{ color: 'red', textAlign: 'center' }}>\r\n            Error in {category}: {error.message}. Please check sensor data.\r\n          </Text>;\r\n        }\r\n      })}\r\n    </ScrollView>\r\n  );\r\n};\r\n\r\nexport default ChartRenderer;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,UAAA;AAE1B,SAASC,QAAQ,QAAQ,wBAAwB;AACjD,OAAOC,YAAY;AACnB,OAAOC,MAAM;AAAiC,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAE9C,IAAMC,aAAa,GAAG,SAAhBA,aAAaA,CAAAC,IAAA,EAAgD;EAAA,IAA1CC,SAAS,GAAAD,IAAA,CAATC,SAAS;IAAEC,WAAW,GAAAF,IAAA,CAAXE,WAAW;IAAEC,WAAW,GAAAH,IAAA,CAAXG,WAAW;EAC1D,IAAI,CAACF,SAAS,IAAIG,MAAM,CAACC,IAAI,CAACJ,SAAS,CAAC,CAACK,MAAM,KAAK,CAAC,EAAE;IACrD,OAAOV,IAAA,CAACN,IAAI;MAAAiB,QAAA,EAAC;IAAiF,CAAM,CAAC;EACvG;EAEA,OACEX,IAAA,CAACL,UAAU;IAAAgB,QAAA,EACRH,MAAM,CAACC,IAAI,CAACJ,SAAS,CAAC,CAACO,GAAG,CAAC,UAAAC,QAAQ,EAAI;MACtC,IAAI;QACF,IAAMC,SAAS,GAAGjB,YAAY,CAACQ,SAAS,CAACQ,QAAQ,CAAC,EAAEA,QAAQ,CAAC;QAE7D,OACEX,KAAA,CAACT,IAAI;UAAgBsB,KAAK,EAAEjB,MAAM,CAACkB,cAAe;UAAAL,QAAA,GAChDX,IAAA,CAACN,IAAI;YAACqB,KAAK,EAAE;cAAEE,SAAS,EAAE;YAAS,CAAE;YAAAN,QAAA,EAAEE;UAAQ,CAAO,CAAC,EACvDb,IAAA,CAACJ,QAAQ;YACPsB,IAAI,EAAEJ,SAAU;YAChBK,KAAK,EAAEb,WAAY;YACnBc,MAAM,EAAE,GAAI;YACZb,WAAW,EAAEA,WAAY;YACzBc,QAAQ,EAAE;UAAK,CAChB,CAAC;QAAA,GAROR,QASL,CAAC;MAEX,CAAC,CAAC,OAAOS,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAE,8BAA6BT,QAAS,KAAIS,KAAM,EAAC,CAAC;QACjE,OAAOpB,KAAA,CAACR,IAAI;UAAgBqB,KAAK,EAAE;YAAES,KAAK,EAAE,KAAK;YAAEP,SAAS,EAAE;UAAS,CAAE;UAAAN,QAAA,GAAC,WAC/D,EAACE,QAAQ,EAAC,IAAE,EAACS,KAAK,CAACG,OAAO,EAAC,6BACtC;QAAA,GAFkBZ,QAEZ,CAAC;MACT;IACF,CAAC;EAAC,CACQ,CAAC;AAEjB,CAAC;AAED,eAAeV,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}