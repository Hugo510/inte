{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport getChartData from \"../components/GetChartData\";\nimport mapSensorType from \"../components/mapSensorType\";\nexport var validateSensorData = function validateSensorData(sensorData, sensorType) {\n  if (!Array.isArray(sensorData) || sensorData.length === 0) {\n    throw new Error(\"No valid sensor data available.\");\n  }\n  var validatedData = sensorData.filter(function (entry) {\n    var hasValidValue = entry.hasOwnProperty(sensorType) && !isNaN(entry[sensorType]);\n    var hasValidTimestamp = entry.hasOwnProperty('timestamp') && !isNaN(new Date(entry.timestamp).getTime());\n    return hasValidValue && hasValidTimestamp;\n  });\n  if (validatedData.length === 0) {\n    throw new Error(\"No valid entries found after validation.\");\n  }\n  return validatedData;\n};\nexport var fetchDataForSensor = function () {\n  var _ref = _asyncToGenerator(function* () {\n    var sensorType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'ALL';\n    var setGraphData = arguments.length > 1 ? arguments[1] : undefined;\n    var setIsLoading = arguments.length > 2 ? arguments[2] : undefined;\n    var setError = arguments.length > 3 ? arguments[3] : undefined;\n    setIsLoading(true);\n    setError('');\n    try {\n      var userToken = yield AsyncStorage.getItem('userToken');\n      if (!userToken) throw new Error('User token not available');\n      var deviceId = yield AsyncStorage.getItem('@selected_device');\n      var sensorTypes = mapSensorType(sensorType);\n      if (!Array.isArray(sensorTypes)) {\n        sensorTypes = [sensorTypes];\n      }\n      var allChartData = {};\n      for (var type of sensorTypes) {\n        var endpoint = `http://${global.ipDireccion}:3000/api/devices/${deviceId}/sensors/${type}/data`;\n        var headers = {\n          Authorization: `Bearer ${userToken}`\n        };\n        var response = yield fetch(endpoint, {\n          method: 'GET',\n          headers: headers\n        });\n        var data = yield response.json();\n        if (!response.ok) throw new Error(data.message || `Failed to fetch data for sensor: ${type}`);\n        var validatedData = validateSensorData(data, type);\n        if (validatedData.length === 0) continue;\n        allChartData[type] = getChartData(validatedData, type);\n      }\n      if (Object.keys(allChartData).length === 0) {\n        throw new Error('No chart data found for any sensors');\n      }\n      setGraphData(allChartData);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n      setError(error.message);\n    } finally {\n      setIsLoading(false);\n    }\n  });\n  return function fetchDataForSensor() {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["AsyncStorage","getChartData","mapSensorType","validateSensorData","sensorData","sensorType","Array","isArray","length","Error","validatedData","filter","entry","hasValidValue","hasOwnProperty","isNaN","hasValidTimestamp","Date","timestamp","getTime","fetchDataForSensor","_ref","_asyncToGenerator","arguments","undefined","setGraphData","setIsLoading","setError","userToken","getItem","deviceId","sensorTypes","allChartData","type","endpoint","global","ipDireccion","headers","Authorization","response","fetch","method","data","json","ok","message","Object","keys","error","console","apply"],"sources":["F:/proyectos/intew/views/graphics/services/SensorDataService.js"],"sourcesContent":["\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport getChartData from '../components/GetChartData'; // Make sure this is the correct path\r\nimport mapSensorType from '../components/mapSensorType'; // Make sure this is the correct path\r\n\r\n\r\n// FunciÃ³n para validar los datos del sensor\r\nexport const validateSensorData = (sensorData, sensorType) => {\r\n  if (!Array.isArray(sensorData) || sensorData.length === 0) {\r\n    throw new Error(\"No valid sensor data available.\");\r\n  }\r\n\r\n  const validatedData = sensorData.filter(entry => {\r\n    const hasValidValue = entry.hasOwnProperty(sensorType) && !isNaN(entry[sensorType]);\r\n    const hasValidTimestamp = entry.hasOwnProperty('timestamp') && !isNaN(new Date(entry.timestamp).getTime());\r\n    return hasValidValue && hasValidTimestamp;\r\n  });\r\n\r\n  if (validatedData.length === 0) {\r\n    throw new Error(\"No valid entries found after validation.\");\r\n  }\r\n\r\n  return validatedData;\r\n};\r\n\r\n\r\nexport const fetchDataForSensor = async (sensorType = 'ALL', setGraphData, setIsLoading, setError) => {\r\n  setIsLoading(true);\r\n  setError('');\r\n  try {\r\n    const userToken = await AsyncStorage.getItem('userToken');\r\n    if (!userToken) throw new Error('User token not available');\r\n    const deviceId = await AsyncStorage.getItem('@selected_device');\r\n    let sensorTypes = mapSensorType(sensorType);\r\n    if (!Array.isArray(sensorTypes)) {\r\n      sensorTypes = [sensorTypes];\r\n    }\r\n\r\n    let allChartData = {};\r\n    for (const type of sensorTypes) {\r\n      const endpoint = `http://${global.ipDireccion}:3000/api/devices/${deviceId}/sensors/${type}/data`;\r\n      const headers = { Authorization: `Bearer ${userToken}` };\r\n      const response = await fetch(endpoint, { method: 'GET', headers });\r\n      const data = await response.json();\r\n      if (!response.ok) throw new Error(data.message || `Failed to fetch data for sensor: ${type}`);\r\n      const validatedData = validateSensorData(data, type);\r\n      if (validatedData.length === 0) continue; // Skip if no valid data\r\n      allChartData[type] = getChartData(validatedData, type); // Transform data for chart\r\n    }\r\n\r\n    if (Object.keys(allChartData).length === 0) {\r\n      throw new Error('No chart data found for any sensors');\r\n    }\r\n\r\n    setGraphData(allChartData);\r\n  } catch (error) {\r\n    console.error('Error fetching data:', error);\r\n    setError(error.message);\r\n  } finally {\r\n    setIsLoading(false);\r\n  }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}